import org.jooq.util.GenerationTool

import javax.xml.bind.JAXB

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        classpath "com.h2database:h2:1.4.190"
        classpath 'org.jooq:jooq-codegen:3.7.2'
    }
}

plugins {
    id 'application'
    id 'java'
    id 'com.github.johnrengelman.shadow' version '1.2.2'
}

// See: http://www.notsocomplex.com/2015/04/mrforms/how-to-run-integration-tests-with-gradle/
sourceSets {
    generated {
        java {
            srcDir 'generated/src/main/java'
        }
    }
    main {
        java {
            srcDirs += [generated.allSource]
        }
    }
    test {
        srcDirs += [generated.allSource]
    }
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integrationTest/java')
        }
        resources.srcDir('src/integrationTest/resources')
    }
}

group 'com.example'
version '1.0-SNAPSHOT'

project.sourceCompatibility = 1.8
project.targetCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
}

project.ext {
    configPath = "$rootProject.projectDir/"
    configFile = configPath + 'todo-config.yml'
    dropwizardVersion = '0.9.1'
    h2Version = '1.4.190'
    jooqVersion = '3.7.2'
}

mainClassName = "com.example.todo.TodoApplication"


dependencies {
    compile (
            'com.bendb.dropwizard:dropwizard-jooq:0.8.1-1',

            'com.google.guava:guava:19.0',
            'com.google.inject:guice:4.0',

            'com.hubspot.dropwizard:dropwizard-guice:0.8.4.0',

            "io.dropwizard:dropwizard-core:$dropwizardVersion",
            "io.dropwizard:dropwizard-client:$dropwizardVersion",
            "io.dropwizard:dropwizard-db:$dropwizardVersion",
            // No version 0.9.1 for dropwizard-flyway
            'io.dropwizard.modules:dropwizard-flyway:0.9.0-1',
            "io.dropwizard:dropwizard-testing:$dropwizardVersion",

            "org.jooq:jooq:$jooqVersion"
    )
    testCompile (
            'junit:junit:4.11'
    )
    runtime (
            "com.h2database:h2:$h2Version",
    )
	integrationTestCompile (
            // Add the output of the main and test source sets so that the integration tests
            // have access to the compiled classes to run tests against
            sourceSets.main.output,
            sourceSets.test.output,

            // Configures the dependency reusing those of the 'test' task.
            // This will allow reusing of JUnit and other mock libraries for instance.
            configurations.testCompile,
            configurations.testRuntime
    )
}

// https://github.com/jOOQ/jOOQ/tree/master/jOOQ-examples/jOOQ-codegen-gradle
def writer = new StringWriter()
def xml = new groovy.xml.MarkupBuilder(writer)
        .configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.7.0.xsd') {
    jdbc() {
        driver('org.h2.Driver')
        url('jdbc:h2:~/todo-db')
        user('sa')
        password('sa')
    }
    generator() {
        database() {
            inputSchema('todo')
        }

        // Watch out for this caveat when using MarkupBuilder with "reserved names"
        // - https://github.com/jOOQ/jOOQ/issues/4797
        // - http://stackoverflow.com/a/11389034/521799
        // - https://groups.google.com/forum/#!topic/jooq-user/wi4S9rRxk4A
        generate([:]) {
            pojos true
            daos true
        }
        target() {
            packageName('com.example.todo.models')
            directory('generated/src/main/java')
        }
    }
}

// Run the code generator
// ----------------------
GenerationTool.generate(
    JAXB.unmarshal(new StringReader(writer.toString()),
            org.jooq.util.jaxb.Configuration.class)
)

// https://github.com/johnrengelman/shadow
shadowJar {
    mergeServiceFiles()
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
}


task integrationTest(type: Test) {

    // Generated reports and execution files for JUnit will be copied in these
	// directories
	reports.junitXml.destination = file("$buildDir/integration-test-results/")
	reports.html.destination = file("$buildDir/integration-test-results/")

    // Adds the integration tests classes to the test suite along with
	// the runtime classpath
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath += sourceSets.integrationTest.runtimeClasspath
}


// When executing the task 'check', we now force the execution of integration tests as well
check.dependsOn integrationTest

// Running integration tests requires that unit tests are executed first
integrationTest.dependsOn test

jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
}

task stage {
    dependsOn build
    dependsOn shadowJar
}

run {
    args 'server', configFile
}