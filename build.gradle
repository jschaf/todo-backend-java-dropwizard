
plugins {
    id 'application'
    id 'java'
    id 'com.github.johnrengelman.shadow' version '1.2.2'
}

// See: http://www.notsocomplex.com/2015/04/mrforms/how-to-run-integration-tests-with-gradle/
sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integrationTest/java')
        }
        resources.srcDir('src/integrationTest/resources')
    }
}

group 'com.example'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

project.ext {
    configPath = "$rootProject.projectDir/"
    configFile = configPath + 'todo-config.yml'
    dropwizardVersion = '0.9.1'
}

mainClassName = "com.example.todo.TodoApplication"


dependencies {
    compile (
            'com.google.guava:guava:19.0',
            'com.google.inject:guice:4.0',

            'com.hubspot.dropwizard:dropwizard-guice:0.8.4.0',

            "io.dropwizard:dropwizard-core:$dropwizardVersion",
            "io.dropwizard:dropwizard-client:$dropwizardVersion",
            "io.dropwizard:dropwizard-db:$dropwizardVersion",
            // No version 0.9.1 for dropwizard-flyway
            'io.dropwizard.modules:dropwizard-flyway:0.9.0-1',
            "io.dropwizard:dropwizard-testing:$dropwizardVersion",

            'com.h2database:h2:1.3.168'
    )
    testCompile 'junit:junit:4.11'

    // Add the output of the main and test source sets so that the integration tests
	// have access to the compiled classes to run tests against
	integrationTestCompile sourceSets.main.output
	integrationTestCompile sourceSets.test.output

    // Configures the dependency reusing those of the 'test' task.
	// This will allow reusage of JUnit and other mock libraries for instance
	integrationTestCompile configurations.testCompile
	integrationTestRuntime configurations.testRuntime
}


shadowJar {
    mergeServiceFiles()
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
}


task integrationTest(type: Test) {

    // Generated reports and execution files for JUnit will be copied in these
	// directories
	reports.junitXml.destination = file("$buildDir/integration-test-results/")
	reports.html.destination = file("$buildDir/integration-test-results/")

    // Adds the integration tests classes to the test suite along with
	// the runtime classpath
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath += sourceSets.integrationTest.runtimeClasspath
}


// When executing the task 'check', we now force the execution of integration tests as well
check.dependsOn integrationTest

// Running integration tests requires that unit tests are executed first
integrationTest.dependsOn test

jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
}

task stage {
    dependsOn build
    dependsOn shadowJar
}

run {
    args 'server', configFile
}